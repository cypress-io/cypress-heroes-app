"use strict";(self.webpackChunkguide_generator=self.webpackChunkguide_generator||[]).push([[567],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>d});var o=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},s=Object.keys(t);for(o=0;o<s.length;o++)n=s[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(o=0;o<s.length;o++)n=s[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var r=o.createContext({}),l=function(t){var e=o.useContext(r),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},u=function(t){var e=l(t.components);return o.createElement(r.Provider,{value:e},t.children)},i={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},m=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,s=t.originalType,r=t.parentName,u=p(t,["components","mdxType","originalType","parentName"]),m=l(n),d=a,b=m["".concat(r,".").concat(d)]||m[d]||i[d]||s;return n?o.createElement(b,c(c({ref:e},u),{},{components:n})):o.createElement(b,c({ref:e},u))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var s=n.length,c=new Array(s);c[0]=m;var p={};for(var r in e)hasOwnProperty.call(e,r)&&(p[r]=e[r]);p.originalType=t,p.mdxType="string"==typeof t?t:a,c[1]=p;for(var l=2;l<s;l++)c[l]=n[l];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5687:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>r,contentTitle:()=>c,default:()=>i,frontMatter:()=>s,metadata:()=>p,toc:()=>l});var o=n(7462),a=(n(7294),n(3905));const s={},c="Lab2 - Cypress Component Testing",p={unversionedId:"lab2",id:"lab2",title:"Lab2 - Cypress Component Testing",description:"Getting Started",source:"@site/docs/lab2.md",sourceDirName:".",slug:"/lab2",permalink:"/cypress-heroes-app/lab2",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Lab1 - Protractor Migration",permalink:"/cypress-heroes-app/lab1"},next:{title:"Lab3 - Testing a Form",permalink:"/cypress-heroes-app/lab3"}},r={},l=[{value:"Getting Started",id:"getting-started",level:2},{value:"Setup Cypress",id:"setup-cypress",level:2},{value:"Launch Cypress",id:"launch-cypress",level:2},{value:"Button Component Test",id:"button-component-test",level:2},{value:"Custom mount command",id:"custom-mount-command",level:2},{value:"Testing Button with an @Input",id:"testing-button-with-an-input",level:2},{value:"Testing an emitted event",id:"testing-an-emitted-event",level:2}],u={toc:l};function i(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lab2---cypress-component-testing"},"Lab2 - Cypress Component Testing"),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"To get started, make sure your current branch is clean, and then checkout the ",(0,a.kt)("inlineCode",{parentName:"p"},"lab2-start")," branch:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git checkout lab2-start\n")),(0,a.kt)("p",null,"You can find a completed version of this lab in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-heroes-app/tree/lab2-complete"},"lab2-complete")," branch."),(0,a.kt)("p",null,"If the app is not currently running, start it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title='./client'",title:"'./client'"},"npm run start\n")),(0,a.kt)("h2",{id:"setup-cypress"},"Setup Cypress"),(0,a.kt)("p",null,"Add Cypress Schematic:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client",title:"./client"},"ng add @cypress/schematic\n")),(0,a.kt)("p",null,"When asked to set up e2e, select no"),(0,a.kt)("p",null,"When asked to add CT, select yes"),(0,a.kt)("p",null,"When asked to add CT alongside existing components, select no (we'll do these\none at a time)"),(0,a.kt)("h2",{id:"launch-cypress"},"Launch Cypress"),(0,a.kt)("p",null,"open Cypress"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client",title:"./client"},"npm cypress:open\n")),(0,a.kt)("p",null,"select CT"),(0,a.kt)("p",null,"start browser"),(0,a.kt)("p",null,"no tests found, lets scaffold one"),(0,a.kt)("h2",{id:"button-component-test"},"Button Component Test"),(0,a.kt)("p",null,"add spec:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/components/button/button.component.cy.ts",title:"./client/src/app/components/button/button.component.cy.ts"},"import { ButtonComponent } from './button.component';\n\ndescribe('ButtonComponent', () => {\n  it('should mount', () => {\n    cy.mount(ButtonComponent);\n  });\n});\n")),(0,a.kt)("p",null,"the component mounts but looks off because we aren't passing in a slot"),(0,a.kt)("p",null,"add test to use wrapper:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/components/button/button.component.cy.ts",title:"./client/src/app/components/button/button.component.cy.ts"},"it('should have custom text', () => {\n  @Component({\n    template: '<app-button>Click me</app-button>',\n  })\n  class Wrapper {}\n\n  cy.mount(Wrapper, {\n    declarations: [ButtonComponent],\n  });\n  cy.get('button').should('have.text', 'Click me');\n});\n")),(0,a.kt)("p",null,"update to use template syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/components/button/button.component.cy.ts",title:"./client/src/app/components/button/button.component.cy.ts"},"it('should have custom text', () => {\n  cy.mount(`<app-button>Click me</app-button>`, {\n    declarations: [ButtonComponent],\n  });\n  cy.get('button').should('have.text', 'Click me');\n});\n")),(0,a.kt)("h2",{id:"custom-mount-command"},"Custom mount command"),(0,a.kt)("p",null,"Add custom mount command to always include button declaration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/cypress/support/component.ts",title:"./client/cypress/support/component.ts"},"type MountParams = Parameters<typeof mount>;\n\nCypress.Commands.add(\n  'mount',\n  (component: MountParams[0], config: MountParams[1]) => {\n    const declarations = [ButtonComponent];\n    if (!config) {\n      config = { declarations };\n    } else {\n      config.declarations = [...(config?.declarations || []), ...declarations];\n    }\n    return mount(component, config);\n  }\n);\n")),(0,a.kt)("p",null,"now our tests don't need to include button:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/components/button/button.component.cy.ts",title:"./client/src/app/components/button/button.component.cy.ts"},"it('should have custom text', () => {\n  cy.mount(`<app-button>Click me</app-button>`);\n  cy.get('button').should('have.text', 'Click me');\n});\n")),(0,a.kt)("p",null,"we can make mount command better by importing the components module"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/cypress/support/component.ts",title:"./client/cypress/support/component.ts"},"Cypress.Commands.add(\n  'mount',\n  (component: MountParams[0], config: MountParams[1]) => {\n    const imports = [ComponentsModule];\n    if (!config) {\n      config = { imports };\n    } else {\n      config.imports = [...(config?.imports || []), ...imports];\n    }\n    return mount(component, config);\n  }\n);\n")),(0,a.kt)("h2",{id:"testing-button-with-an-input"},"Testing Button with an @Input"),(0,a.kt)("p",null,"test if focus input works"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/components/button/button.component.cy.ts",title:"./client/src/app/components/button/button.component.cy.ts"},"it('should not be focused when focus is falsey', () => {\n  cy.mount(`<app-button>Click me</app-button>`);\n  cy.focused().should('not.exist');\n});\n\nit('should be focused when focus is true', () => {\n  cy.mount(`<app-button focus=\"true\">Click me</app-button>`);\n  cy.focused().should('have.text', 'Click me');\n});\n")),(0,a.kt)("h2",{id:"testing-an-emitted-event"},"Testing an emitted event"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/components/button/button.component.cy.ts",title:"./client/src/app/components/button/button.component.cy.ts"},"it('should respond to onClick event', () => {\n  cy.mount('<app-button (click)=\"onClick.emit($event)\">Click me</app-button>', {\n    componentProperties: {\n      onClick: {\n        emit: cy.spy().as('onClickSpy'),\n      },\n    },\n  });\n  cy.get('button').click();\n  cy.get('@onClickSpy').should('have.been.called');\n});\n")),(0,a.kt)("p",null,"defining the click spy is a bit verbose, so use ",(0,a.kt)("inlineCode",{parentName:"p"},"createOutputSpy"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/components/button/button.component.cy.ts",title:"./client/src/app/components/button/button.component.cy.ts"},"it('should respond to onClick event', () => {\n  cy.mount('<app-button (click)=\"onClick.emit($event)\">Click me</app-button>', {\n    componentProperties: {\n      onClick: createOutputSpy('onClickSpy'),\n    },\n  });\n  cy.get('button').click();\n  cy.get('@onClickSpy').should('have.been.called');\n});\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"We also have a method to auto create spies for all outputs, with a caveat\nthat you need to use the component syntax. See\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/component-testing/events-angular#Using-autoSpyOutputs"},"Using autoSpyOutputs"),"\nin the docs for more info.")))}i.isMDXComponent=!0}}]);