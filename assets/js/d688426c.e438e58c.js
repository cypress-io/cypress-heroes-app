"use strict";(self.webpackChunkguide_generator=self.webpackChunkguide_generator||[]).push([[134],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),g=o,d=u["".concat(s,".").concat(g)]||u[g]||m[g]||r;return t?a.createElement(d,i(i({ref:n},p),{},{components:t})):a.createElement(d,i({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2757:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const r={},i="Lab3 - Testing a Form",l={unversionedId:"lab3",id:"lab3",title:"Lab3 - Testing a Form",description:"Getting Started",source:"@site/docs/lab3.md",sourceDirName:".",slug:"/lab3",permalink:"/cypress-heroes-app/lab3",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Lab2 - Cypress Component Testing",permalink:"/cypress-heroes-app/lab2"}},s={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Create LoginForm Spec",id:"create-loginform-spec",level:2},{value:"Test validation",id:"test-validation",level:3},{value:"Test Invalid Credentials",id:"test-invalid-credentials",level:3},{value:"Test valid credentials",id:"test-valid-credentials",level:3}],p={toc:c};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lab3---testing-a-form"},"Lab3 - Testing a Form"),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("p",null,"To get started, make sure your current branch is clean, and then checkout the\n",(0,o.kt)("inlineCode",{parentName:"p"},"lab3-start")," branch:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git checkout lab3-start\n")),(0,o.kt)("p",null,"You can find a completed version of this lab in the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-heroes-app/tree/lab3-complete"},"lab3-complete"),"\nbranch."),(0,o.kt)("p",null,"If the app is not currently running, start it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title='./client'",title:"'./client'"},"npm run start\n")),(0,o.kt)("h2",{id:"create-loginform-spec"},"Create LoginForm Spec"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/components/login-form.component.ts",title:"./client/src/app/components/login-form.component.ts"},"describe('LoginModal', () => {\n  it('should mount', () => {\n    cy.mount('<app-login-form></app-login-form>');\n  });\n});\n")),(0,o.kt)("p",null,"form loads with all its required declarations because we registered the\nComponentsModule in the last lab."),(0,o.kt)("h3",{id:"test-validation"},"Test validation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/components/login-form.component.ts",title:"./client/src/app/components/login-form.component.ts"},"it('should show validation messages when inputs are blank', () => {\n  cy.mount('<app-login-form></app-login-form>');\n  cy.get('button').contains('Sign in').click();\n\n  cy.contains('Email is required.');\n  cy.contains('Password is required.');\n\n  cy.get('input[type=email]').type('aaabbb');\n  cy.contains('Email must be a valid email address.');\n});\n")),(0,o.kt)("p",null,"comment about multiple assertions in test"),(0,o.kt)("h3",{id:"test-invalid-credentials"},"Test Invalid Credentials"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/components/login-form.component.ts",title:"./client/src/app/components/login-form.component.ts"},"it('should show bad login message when credentials are invalid', () => {\n  cy.mount('<app-login-form></app-login-form>', {\n    providers: [\n      {\n        provide: AuthService,\n        useValue: {\n          login: cy\n            .stub()\n            .as('loginSpy')\n            .returns(\n              throwError(() => new Error('Invalid username or password'))\n            ),\n        },\n      },\n    ],\n  });\n  cy.get('button').contains('Sign in').click();\n\n  cy.get('input[type=email]').type('bad@email.com');\n  cy.get('input[type=password]').type('badpass');\n  cy.get('button').contains('Sign in').click();\n\n  cy.get('@loginSpy').should(\n    'have.been.calledWith',\n    'bad@email.com',\n    'badpass'\n  );\n  cy.contains('Invalid username or password');\n});\n")),(0,o.kt)("p",null,"show alternative way of intercepting http request"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/components/login-form.component.ts",title:"./client/src/app/components/login-form.component.ts"},"it('should show bad login message when credentials are invalid', () => {\n  cy.intercept('POST', '/auth', {\n    statusCode: 401,\n  });\n\n  cy.mount('<app-login-form></app-login-form>');\n  cy.get('button').contains('Sign in').click();\n\n  cy.get('input[type=email]').type('bad@email.com');\n  cy.get('input[type=password]').type('badpass');\n  cy.get('button').contains('Sign in').click();\n\n  cy.contains('Invalid username or password');\n});\n")),(0,o.kt)("h3",{id:"test-valid-credentials"},"Test valid credentials"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/components/login-form.component.ts",title:"./client/src/app/components/login-form.component.ts"},"it('should login message when credentials are valid', () => {\n  cy.intercept('POST', '/auth', {\n    statusCode: 200,\n    body: {},\n  });\n\n  cy.mount(\n    '<app-login-form (onLogin)=\"onLogin.emit($event)\"></app-login-form>',\n    {\n      componentProperties: {\n        onLogin: createOutputSpy('onLoginSpy'),\n      },\n    }\n  );\n\n  cy.get('input[type=email]').type('good@email.com');\n  cy.get('input[type=password]').type('goodpass');\n\n  cy.get('button').contains('Sign in').click();\n\n  cy.get('@onLoginSpy').should('have.been.called');\n});\n")),(0,o.kt)("p",null,"add a test to make sure localStorage was set:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/components/login-form.component.ts",title:"./client/src/app/components/login-form.component.ts"},"it('should login message when credentials are valid', () => {\n  //highlight-start\n  const authResult = {\n    access_token: 'aaa',\n    user: {},\n    expiresAt: 12345,\n  };\n  //highlight-end\n\n  cy.intercept('POST', '/auth', {\n    statusCode: 200,\n    //highlight-next-line\n    body: authResult,\n  });\n\n  //highlight-next-line\n  cy.spy(localStorage, 'setItem').as('setItemSpy');\n\n  cy.mount(\n    '<app-login-form (onLogin)=\"onLogin.emit($event)\"></app-login-form>',\n    {\n      componentProperties: {\n        onLogin: createOutputSpy('onLoginSpy'),\n      },\n    }\n  );\n\n  cy.get('input[type=email]').type('good@email.com');\n  cy.get('input[type=password]').type('goodpass');\n\n  cy.get('button').contains('Sign in').click();\n\n  cy.get('@onLoginSpy').should('have.been.called');\n\n  //highlight-start\n  cy.get('@setItemSpy').should(\n    'have.been.calledWith',\n    'auth_result',\n    JSON.stringify(authResult)\n  );\n  //highlight-end\n});\n")))}m.isMDXComponent=!0}}]);